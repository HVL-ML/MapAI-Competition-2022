version: 1.0

model:
  name: "UNet"
  encoder_depth: 5
  encoder: "efficientnet-b1"
  aux_head: False
  in_channels: 7
  aux_head_params:
    classes: 1 # binary building / no building classification
    pooling: "avg" # "max",  "avg"
    dropout: 0.2 # default 0.0


dataset: 'mapai' # mapai, mapai_reclassified, mapai_lidar_masks, landcover
ensemble_name: "task3_ensemble"
ensemble_task: 2
allow_missing_samples: True

augmentation: 
  warmup_epochs: 100

imagesize: 512
training:
  losses:
    # "DiceLoss": smp.losses.DiceLoss,
    # "JaccardLoss": smp.losses.JaccardLoss,
    # "TverskyLoss": smp.losses.TverskyLoss,
    # "FocalLoss": smp.losses.FocalLoss,
    # "LovaszLoss": smp.losses.LovaszLoss,
    # "CrossEntropy": smp.losses.SoftBCEWithLogitsLoss, OR smp.losses.SoftCrossEntropyLoss if num_classes > 1
    names: ['CrossEntropy']
    weights: [1.0]
    CrossEntropy:
      init_params:
        smooth_factor: 0.01

  optimizer:
    name: RAdam # Adam, SGD, RAdam, AdamWarmup
    init_params:
      lr: 0.0001

  scheduler:
    name: MultiStep # PolyLR, MultiStep
    init_params:
      milestones: [3]
  # fit:
  #   epochs: 50
  #   accumulation_steps: 4


testing:
  interpolation: bilinear # bicubic, bilinear
  antialias: True
  erode_val_preds: True

train:
  epochs: 6
  batchsize: 4
  shuffle: True
  num_workers: 6
  data_ratio: 0.3

validation:
  batchsize: 4
  shuffle: False
  num_workers: 6
  data_ratio: 1.0